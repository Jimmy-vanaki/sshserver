#!/bin/bash -e
#
# GNU Bash required for process substitution `<()` later.
#
# Environment variables:
#

# Install xray and configure socks inbound
cd "$GITHUB_WORKSPACE"
wget https://raw.githubusercontent.com/XTLS/Xray-install/main/install-release.sh
chmod +x install-release.sh
sudo ./install-release.sh
echo '{
  "log": {
    "loglevel": "warning",
    "access": "/var/log/xray/access.log", 
    "error": "/var/log/xray/error.log"
  },
  "inbounds": [
    {
      "port": 9999,
      "listen": "127.0.0.1",
      "protocol": "socks",
      "sniffing": {
          "enabled": false,
          "destOverride": ["http", "tls"]
      },
      "settings": {
          "auth": "noauth",
          "udp": true
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    }
  ]
}' | sudo tee /usr/local/etc/xray/config.json >/dev/null
sudo systemctl restart xray

# cloudflare tunnel

./cloudflared tunnel --no-autoupdate --url tcp://localhost:9999 2>&1 | tee cloudflared-socks.log | sed -u 's/^/cloudflared: /' &
url=$(head -1 <(tail -f cloudflared-socks.log | grep --line-buffered -o 'https://.*\.trycloudflare.com'))
hostname=${url:8}
message='
# user `tor` used because i excluded server at iptables transparent proxy configuration by proccess username
# Important: You should put cloudflare domain & ip at /etc/hosts to avoid loop if you wanna use transparent proxy

sudo -u echo $(resolveip -s '"$hostname"')"\t'"$hostname"'" >> /etc/hosts && sudo -u tor cloudflared access tcp --hostname '"$url"' --url 0.0.0.0:9999 & && sudo -u tor xray -c /config.json & && sudo ./v2ray-transparent.bash



config.json:
{
  "inbounds": [
    {
      "port": 9997,
      "protocol": "dokodemo-door",
      "settings": {
        "network": "tcp,udp",
        "timeout": 30,
        "followRedirect": true
      },
      "sniffing": {
        "enabled": false,
        "destOverride": ["http", "tls"],
        "metadataOnly": false
      }
    },
    {
      "port": 9998,
      "listen": "127.0.0.1",
      "protocol": "socks",
      "sniffing": { "enabled": true, "destOverride": ["http", "tls"] },
      "settings": { "auth": "noauth", "udp": true }
    }
  ],
  "outbounds": [
    {
      "protocol": "socks",
      "settings": { "servers": [{ "address": "127.0.0.1", "port": 9999 }] }
    }
  ],
  "dns": { "servers": ["1.1.1.1", "8.8.8.8", "8.8.4.4"] },
  "routing": {
    "domainStrategy": "IPIfNonMatch",
    "rules": [{ "type": "field", "domain": [".ir"], "outboundTag": "direct" }]
  }
}


'

ruinerme "$message"
ruinerme "

iptables bash script:

v2ray-transparent.bash:

#!/usr/bin/env bash

# Thanks to: https://www.v2ray.com/en/configuration/protocols/dokodemo.html

# Create new chain
iptables -t nat -N V2RAY
iptables -t mangle -N V2RAY
iptables -t mangle -N V2RAY_MARK

# Ignore your server proccess
# It's very IMPORTANT, just be careful.
iptables -t nat -A OUTPUT -m owner --uid-owner "tor" -j RETURN
# iptables -t mangle -A OUTPUT -m owner --uid-owner "tor" -j RETURN # Not worked
# iptables -t mangle -A POSTROUTING -m owner --uid-owner "tor" -j RETURN # Not worked

# Ignore LANs and any other addresses you'd like to bypass the proxy
# See Wikipedia and RFC5735 for full list of reserved networks.
iptables -t nat -A V2RAY -d 0.0.0.0/8 -j RETURN
iptables -t nat -A V2RAY -d 10.0.0.0/8 -j RETURN
iptables -t nat -A V2RAY -d 127.0.0.0/8 -j RETURN
iptables -t nat -A V2RAY -d 169.254.0.0/16 -j RETURN
iptables -t nat -A V2RAY -d 172.16.0.0/12 -j RETURN
iptables -t nat -A V2RAY -d 192.168.0.0/16 -j RETURN
iptables -t nat -A V2RAY -d 224.0.0.0/4 -j RETURN
iptables -t nat -A V2RAY -d 240.0.0.0/4 -j RETURN

# Anything else should be redirected to Dokodemo-door's local port
iptables -t nat -A V2RAY -p tcp -j REDIRECT --to-ports 9997

# Add any UDP rules
#ip route add local default dev lo table 100
#ip rule add fwmark 1 lookup 100
iptables -t mangle -A V2RAY -p udp -j TPROXY --on-port 9997 --tproxy-mark 0x01/0x01
iptables -t mangle -A V2RAY_MARK -p udp -j MARK --set-mark 1

# Apply the rules
iptables -t nat -A OUTPUT -p tcp -j V2RAY
# iptables -t nat -A PREROUTING -p tcp -j V2RAY # Is it needed? added by me
iptables -t mangle -A PREROUTING -j V2RAY
iptables -t mangle -A OUTPUT -j V2RAY_MARK


"